{
    global: {
        // containerId: 뷰어가 표시될 엘리먼트 id
        containerId: 'viewer3d',

        // dataPaths: 모델, 메시, 텍스쳐, 쉐이더, 샘플을 불러올 경로
        // models: '/data/models/',
        dataPaths: {
            models: './data/models/',
            meshes: './data/meshes/',
            textures: './data/textures/',
            shaders: './data/shaders/',
            samples: './data/samples/',
        },

        // mode: 뷰어의 초기 프리셋을 결정
        // character, prop, background
        mode: 'character',

        // unit: 뷰어의 유닛 단위를 결정. 3D 툴에서 제작할때 사용한 단위와 같이 맞추길 권장함.
        // cm, m, km,
        unit: 'cm',

        // close, default, far
        camera: 'default',

        // userConfig: 입력된 url 경로의 JSON 컨피그 파일을 사용함
        // userConfig: 'conf/viewer3d.user.json5',
        userConfig: '',

        // useUrlOptions: URL 파라미터를 통해 옵션을 입력하게 함
        // URL 파라미터로 입력 가능한 옵션 및 대응은 다음과 같음
        // model = options.loader.model
        // camera-position = options.camera.position
        // camera-target = options.camera.target
        // outline = options.effect.outline
        useUrlOptions: false,

        // multiViewer: 다중실행.
        // 다중실행일 경우 컨피그 파일, 라이브러리 로드 등은 처음 한번만 실행
        // URL 파라미터 옵션 입력은 자동으로 false
        multiViewer: false,

    },
    ui: {
        elementId: 'viewer3d_ui',
        displayUi: true,
        stats: {
            use: false,
            statsId: 'ui_stats',
            rendererInfo: true,
            data: { // 리스트에서 true 값만 표시
                bufferSize: true,
                memory: true,
                drawCalls: false,
                lines: false,
                points: false,
                triangles: true,
                frameCount: true,
                frameTime: true,
                FPS: true,
            },
        },
        
    },
    camera: {
        position: [100, 200, 300],
        target: [0, 100, 0],
        fov: 45,
        near: 1,
        far: 2000,
    },
    controls: {
        screenSpacePanning: true
    },
    scene: {
        // background: 0xa0a0a0,
        background: 0x353535,
        // fog: [0xa0a0a0, 200, 1000],
        fog: [0x353535, 200, 1000],
    },
    light: {
        /* directionalLight: {
            color: 0xffffff,
            intensity: 1,
            position: [200, 300, 200],
            lightTarget: {
                position: [0, 0, 0]
            },
            castShadow: true,
            shadow: {
                mapSize: 512,
                bias: -0.002,
                radius: 2,
                camera: {
                    near: 0.5,
                    far: 800,
                    top: 200,
                    bottom: -50,
                    left: -100,
                    right: 100,
                }
            }
        },
        hemisphereLight: {
            skyColor: 0x3385ff,
            groundColor: 0xffa024,
            intensity: 1,
            position: [0, 200, 0],
        },
        ambientLight: {
            // 값이 비어있을 경우 만들어지지 않음
            // color: 0x101010,
            // intensity: 1,
        },
        // 포인트라이트는 배열처리로 여러개를 만들수 있음
        pointLights: [{

        }], */
    },
    groundMesh: {
        mesh: {
            // size: [4000, 4000],
            // color: 0x999999,
            // depthWrite: false,
            // receiveShadow: true,
        },
        grid: {
            size: 4000,
            divisions: 40,
            colorCenterLine: 0x000000,
            colorGrid: 0x000000,
            opacity: 0.2,
            transparent: true,
        }
    },
    renderer: {
        canvasId: 'viewer3d_render',
        antialias: true,
        gammaInput: true,
        gammaOutput: true,
        shadowMap: {
            enabled: true,
            // BasicShadowMap, PCFShadowMap, PCFSoftShadowMap
            type: 'PCFSoftShadowMap',
        }
    },
    effect: {
        outline: {
            enabled: false,
            defaultThickness: 0.003,
            defaultColor: [0, 0, 0],
            defaultAlpha: 0.8,
            defaultKeepAlive: true,
        },
    },
    /* loader: {
        model: 'YBot.fbx',
        mesh: {
            castShadow: true,
            receiveShadow: true
        },
        material: {
            fog: false
        }
    }, */
}